<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bridge.mapper.BridgeMapper">
	<!-- 잼 음악 insert, get -->
	<insert id="insertMusic" parameterType="bridge.dto.MusicDto">
		insert into concert_music
		(musicUUID, music_title, c_idx)
		values (#{musicUUID}, #{musicTitle},
		#{cIdx})
	</insert>

	<select id="getMusic" resultType="bridge.dto.MusicDto">
		select musicUUID, music_title
		from concert_music
	</select>

	<select id="getSplitedMusic" resultType="bridge.dto.MusicDto">
		select musicUUID
		from
		concert_music
	</select>

	<!-- 코맨트 관련 -->
	<insert id="insertComments"
		parameterType="bridge.dto.CommentsDto">
		insert into concert_comments
		(cc_comments, user_id,
		c_idx, c_date)
		values (#{ccComments}, #{userId},
		#{cIdx}, now())
	</insert>

	<select id="selectCommentsList"
		resultType="bridge.dto.CommentsDto" parameterType="int">
		select cc_idx,
		cc_comments, user_id, c_date
		from concert_comments
		where c_idx=#{cIdx}
		and
		deleted_yn='N'
	</select>

	<update id="updateComments"
		parameterType="bridge.dto.CommentsDto">
		update concert_comments
		set cc_comments = #{ccComments},
		user_id=#{userId}
		where cc_idx = #{ccIdx}
	</update>

	<delete id="deleteComments" parameterType="int">
		update
		concert_comments
		set
		deleted_yn = 'Y'
		where cc_idx = #{ccIdx}
	</delete>

	<!-- 신고 작성 -->
	<insert id="insertReport" parameterType="bridge.dto.ReportDto">
		insert into report
		(report_reason, report_reason_detail, user_id, reported_user_id)
		values (#{reportReason}, #{reportReasonDetail}, #{userId},
		#{reportedUserId})
	</insert>

	<!-- 신고 카운트 증가 -->
	<update id="plusReportCount" parameterType="bridge.dto.UserDto">
		update users
		set
		report_count = report_count + 1
		where user_id=#{reportedUserId};
	</update>

	<!-- 신고 리스트 -->
	<select id="openReportList" resultType="bridge.dto.ReportDto">
		select report_idx,
		report_reason, user_id, reported_user_id
		from report
		order by report_idx DESC
	</select>

	<!-- 특정 신고 디테일 -->
	<select id="openReportDetail" resultType="bridge.dto.ReportDto"
		parameterType="int">
		select report_idx, report_reason, report_reason_detail,
		user_id, reported_user_id
		from report
		where report_idx=#{reportIdx}
	</select>

	<!-- 신고 처리 -->
	<update id="handleReport" parameterType="bridge.dto.UserDto">
		update users
		set
		user_halted = 1
		where user_id=#{userId};
	</update>

	<select id="selectReportCount"
		parameterType="bridge.dto.UserDto" resultType="int">
		select report_count
		from
		users
		where user_id = #{userId}
	</select>

	<!-- 공지 리스트 출력 -->
	<select id="announcementList"
		resultType="bridge.dto.AnnouncementDto">
		select a_idx, a_title, a_contents, a_date
		from announcement
		where deleted_yn='N'
		order by a_idx DESC
	</select>

	<!-- 특정 공지 -->
	<select id="announcementDetail"
		resultType="bridge.dto.AnnouncementDto" parameterType="int">
		select a_idx,
		a_title, a_contents, a_date
		from announcement
		where a_idx=#{aIdx}
		and
		deleted_yn='N'
	</select>

	<!-- 포인트 충전 -->
	<select id="chargePoint" resultType="bridge.dto.UserDto">
		select user_point, user_id
		from users
		where user_id=#{userId}
	</select>

	<update id="doCharge" parameterType="bridge.dto.UserDto">
		update users
		set user_point =
		user_point + #{money}
		where user_id = #{partner_user_id}
	</update>

	<!-- 프로필 작성 -->
	<insert id="insertProfile" parameterType="String"
		useGeneratedKeys="true" keyProperty="userProfileIdx">
		insert into user_profile
		(user_id,
		user_position,
		user_introduction, profile_img, user_site,user_music,
		user_portfolio)
		values
		(#{userId}, #{userPosition}, #{userIntroduction},
		#{profileImg},
		#{userSite},#{userMusic}, #{userPortfolio})
	</insert>

	<insert id="insertTag">
		insert into user_tag(user_profile_idx,tag)
		values
		<foreach collection="tags" item="tags" separator=",">
			(
			#{userProfileIdx}, #{tags})
		</foreach>
	</insert>

	<insert id="tagToProfile">
		UPDATE user_profile
		SET
		user_tag1 = IFNULL(#{userTag1}, user_tag1),
		user_tag2 = IFNULL(#{userTag2}, user_tag2),
		user_tag3 = IFNULL(#{userTag3}, user_tag3)
		WHERE user_profile_idx = #{userProfileIdx}
	</insert>


	<!-- 얜 무시 -->
	<select id="selectMusic" resultType="String">
		select music_title
		from
		concert_music
		where musicUUID = #{musicUUID}
	</select>




</mapper>  